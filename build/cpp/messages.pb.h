// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_messages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSignatureImpl();
void InitDefaultsSignature();
void InitDefaultsSOWImpl();
void InitDefaultsSOW();
void InitDefaultsQuoteImpl();
void InitDefaultsQuote();
void InitDefaultsAgreementImpl();
void InitDefaultsAgreement();
void InitDefaultsRewardImpl();
void InitDefaultsReward();
void InitDefaultsReceiptImpl();
void InitDefaultsReceipt();
inline void InitDefaults() {
  InitDefaultsSignature();
  InitDefaultsSOW();
  InitDefaultsQuote();
  InitDefaultsAgreement();
  InitDefaultsReward();
  InitDefaultsReceipt();
}
}  // namespace protobuf_messages_2eproto
namespace messages {
class Agreement;
class AgreementDefaultTypeInternal;
extern AgreementDefaultTypeInternal _Agreement_default_instance_;
class Quote;
class QuoteDefaultTypeInternal;
extern QuoteDefaultTypeInternal _Quote_default_instance_;
class Receipt;
class ReceiptDefaultTypeInternal;
extern ReceiptDefaultTypeInternal _Receipt_default_instance_;
class Reward;
class RewardDefaultTypeInternal;
extern RewardDefaultTypeInternal _Reward_default_instance_;
class SOW;
class SOWDefaultTypeInternal;
extern SOWDefaultTypeInternal _SOW_default_instance_;
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
}  // namespace messages
namespace messages {

// ===================================================================

class Signature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.Signature) */ {
 public:
  Signature();
  virtual ~Signature();

  Signature(const Signature& from);

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Signature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Signature* other);
  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const PROTOBUF_FINAL { return New(NULL); }

  Signature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Signature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string did = 1;
  void clear_did();
  static const int kDidFieldNumber = 1;
  const ::std::string& did() const;
  void set_did(const ::std::string& value);
  #if LANG_CXX11
  void set_did(::std::string&& value);
  #endif
  void set_did(const char* value);
  void set_did(const char* value, size_t size);
  ::std::string* mutable_did();
  ::std::string* release_did();
  void set_allocated_did(::std::string* did);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:messages.Signature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr did_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsSignatureImpl();
};
// -------------------------------------------------------------------

class SOW : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.SOW) */ {
 public:
  SOW();
  virtual ~SOW();

  SOW(const SOW& from);

  inline SOW& operator=(const SOW& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SOW(SOW&& from) noexcept
    : SOW() {
    *this = ::std::move(from);
  }

  inline SOW& operator=(SOW&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SOW& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SOW* internal_default_instance() {
    return reinterpret_cast<const SOW*>(
               &_SOW_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SOW* other);
  friend void swap(SOW& a, SOW& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SOW* New() const PROTOBUF_FINAL { return New(NULL); }

  SOW* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SOW& from);
  void MergeFrom(const SOW& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SOW* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string work_unit = 3;
  void clear_work_unit();
  static const int kWorkUnitFieldNumber = 3;
  const ::std::string& work_unit() const;
  void set_work_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_work_unit(::std::string&& value);
  #endif
  void set_work_unit(const char* value);
  void set_work_unit(const char* value, size_t size);
  ::std::string* mutable_work_unit();
  ::std::string* release_work_unit();
  void set_allocated_work_unit(::std::string* work_unit);

  // string currency_unit = 4;
  void clear_currency_unit();
  static const int kCurrencyUnitFieldNumber = 4;
  const ::std::string& currency_unit() const;
  void set_currency_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_currency_unit(::std::string&& value);
  #endif
  void set_currency_unit(const char* value);
  void set_currency_unit(const char* value, size_t size);
  ::std::string* mutable_currency_unit();
  ::std::string* release_currency_unit();
  void set_allocated_currency_unit(::std::string* currency_unit);

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .messages.Signature signature = 5;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::messages::Signature& signature() const;
  ::messages::Signature* release_signature();
  ::messages::Signature* mutable_signature();
  void set_allocated_signature(::messages::Signature* signature);

  // @@protoc_insertion_point(class_scope:messages.SOW)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr work_unit_;
  ::google::protobuf::internal::ArenaStringPtr currency_unit_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::messages::Signature* signature_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsSOWImpl();
};
// -------------------------------------------------------------------

class Quote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.Quote) */ {
 public:
  Quote();
  virtual ~Quote();

  Quote(const Quote& from);

  inline Quote& operator=(const Quote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Quote(Quote&& from) noexcept
    : Quote() {
    *this = ::std::move(from);
  }

  inline Quote& operator=(Quote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Quote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quote* internal_default_instance() {
    return reinterpret_cast<const Quote*>(
               &_Quote_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Quote* other);
  friend void swap(Quote& a, Quote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Quote* New() const PROTOBUF_FINAL { return New(NULL); }

  Quote* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Quote& from);
  void MergeFrom(const Quote& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Quote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .messages.SOW sow = 3;
  bool has_sow() const;
  void clear_sow();
  static const int kSowFieldNumber = 3;
  const ::messages::SOW& sow() const;
  ::messages::SOW* release_sow();
  ::messages::SOW* mutable_sow();
  void set_allocated_sow(::messages::SOW* sow);

  // .messages.Signature signature = 4;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 4;
  const ::messages::Signature& signature() const;
  ::messages::Signature* release_signature();
  ::messages::Signature* mutable_signature();
  void set_allocated_signature(::messages::Signature* signature);

  // int64 per_unit_cost = 2;
  void clear_per_unit_cost();
  static const int kPerUnitCostFieldNumber = 2;
  ::google::protobuf::int64 per_unit_cost() const;
  void set_per_unit_cost(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:messages.Quote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::messages::SOW* sow_;
  ::messages::Signature* signature_;
  ::google::protobuf::int64 per_unit_cost_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsQuoteImpl();
};
// -------------------------------------------------------------------

class Agreement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.Agreement) */ {
 public:
  Agreement();
  virtual ~Agreement();

  Agreement(const Agreement& from);

  inline Agreement& operator=(const Agreement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Agreement(Agreement&& from) noexcept
    : Agreement() {
    *this = ::std::move(from);
  }

  inline Agreement& operator=(Agreement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Agreement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Agreement* internal_default_instance() {
    return reinterpret_cast<const Agreement*>(
               &_Agreement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Agreement* other);
  friend void swap(Agreement& a, Agreement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Agreement* New() const PROTOBUF_FINAL { return New(NULL); }

  Agreement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Agreement& from);
  void MergeFrom(const Agreement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Agreement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .messages.Quote quote = 2;
  bool has_quote() const;
  void clear_quote();
  static const int kQuoteFieldNumber = 2;
  const ::messages::Quote& quote() const;
  ::messages::Quote* release_quote();
  ::messages::Quote* mutable_quote();
  void set_allocated_quote(::messages::Quote* quote);

  // .messages.Signature signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const ::messages::Signature& signature() const;
  ::messages::Signature* release_signature();
  ::messages::Signature* mutable_signature();
  void set_allocated_signature(::messages::Signature* signature);

  // @@protoc_insertion_point(class_scope:messages.Agreement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::messages::Quote* quote_;
  ::messages::Signature* signature_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsAgreementImpl();
};
// -------------------------------------------------------------------

class Reward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.Reward) */ {
 public:
  Reward();
  virtual ~Reward();

  Reward(const Reward& from);

  inline Reward& operator=(const Reward& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reward(Reward&& from) noexcept
    : Reward() {
    *this = ::std::move(from);
  }

  inline Reward& operator=(Reward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reward* internal_default_instance() {
    return reinterpret_cast<const Reward*>(
               &_Reward_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Reward* other);
  friend void swap(Reward& a, Reward& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reward* New() const PROTOBUF_FINAL { return New(NULL); }

  Reward* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Reward& from);
  void MergeFrom(const Reward& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Reward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .messages.Agreement agreement = 2;
  bool has_agreement() const;
  void clear_agreement();
  static const int kAgreementFieldNumber = 2;
  const ::messages::Agreement& agreement() const;
  ::messages::Agreement* release_agreement();
  ::messages::Agreement* mutable_agreement();
  void set_allocated_agreement(::messages::Agreement* agreement);

  // .messages.Signature signature = 4;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 4;
  const ::messages::Signature& signature() const;
  ::messages::Signature* release_signature();
  ::messages::Signature* mutable_signature();
  void set_allocated_signature(::messages::Signature* signature);

  // int64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:messages.Reward)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::messages::Agreement* agreement_;
  ::messages::Signature* signature_;
  ::google::protobuf::int64 amount_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsRewardImpl();
};
// -------------------------------------------------------------------

class Receipt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.Receipt) */ {
 public:
  Receipt();
  virtual ~Receipt();

  Receipt(const Receipt& from);

  inline Receipt& operator=(const Receipt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Receipt(Receipt&& from) noexcept
    : Receipt() {
    *this = ::std::move(from);
  }

  inline Receipt& operator=(Receipt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Receipt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Receipt* internal_default_instance() {
    return reinterpret_cast<const Receipt*>(
               &_Receipt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Receipt* other);
  friend void swap(Receipt& a, Receipt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Receipt* New() const PROTOBUF_FINAL { return New(NULL); }

  Receipt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Receipt& from);
  void MergeFrom(const Receipt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Receipt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // .messages.Reward reward = 2;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 2;
  const ::messages::Reward& reward() const;
  ::messages::Reward* release_reward();
  ::messages::Reward* mutable_reward();
  void set_allocated_reward(::messages::Reward* reward);

  // .messages.Signature signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const ::messages::Signature& signature() const;
  ::messages::Signature* release_signature();
  ::messages::Signature* mutable_signature();
  void set_allocated_signature(::messages::Signature* signature);

  // @@protoc_insertion_point(class_scope:messages.Receipt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::messages::Reward* reward_;
  ::messages::Signature* signature_;
  mutable int _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
  friend void ::protobuf_messages_2eproto::InitDefaultsReceiptImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Signature

// string did = 1;
inline void Signature::clear_did() {
  did_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Signature::did() const {
  // @@protoc_insertion_point(field_get:messages.Signature.did)
  return did_.GetNoArena();
}
inline void Signature::set_did(const ::std::string& value) {
  
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Signature.did)
}
#if LANG_CXX11
inline void Signature::set_did(::std::string&& value) {
  
  did_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Signature.did)
}
#endif
inline void Signature::set_did(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Signature.did)
}
inline void Signature::set_did(const char* value, size_t size) {
  
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Signature.did)
}
inline ::std::string* Signature::mutable_did() {
  
  // @@protoc_insertion_point(field_mutable:messages.Signature.did)
  return did_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Signature::release_did() {
  // @@protoc_insertion_point(field_release:messages.Signature.did)
  
  return did_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Signature::set_allocated_did(::std::string* did) {
  if (did != NULL) {
    
  } else {
    
  }
  did_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), did);
  // @@protoc_insertion_point(field_set_allocated:messages.Signature.did)
}

// bytes data = 2;
inline void Signature::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Signature::data() const {
  // @@protoc_insertion_point(field_get:messages.Signature.data)
  return data_.GetNoArena();
}
inline void Signature::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Signature.data)
}
#if LANG_CXX11
inline void Signature::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Signature.data)
}
#endif
inline void Signature::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Signature.data)
}
inline void Signature::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Signature.data)
}
inline ::std::string* Signature::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:messages.Signature.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Signature::release_data() {
  // @@protoc_insertion_point(field_release:messages.Signature.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Signature::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:messages.Signature.data)
}

// -------------------------------------------------------------------

// SOW

// bytes nonce = 1;
inline void SOW::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SOW::nonce() const {
  // @@protoc_insertion_point(field_get:messages.SOW.nonce)
  return nonce_.GetNoArena();
}
inline void SOW::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.SOW.nonce)
}
#if LANG_CXX11
inline void SOW::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.SOW.nonce)
}
#endif
inline void SOW::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.SOW.nonce)
}
inline void SOW::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.SOW.nonce)
}
inline ::std::string* SOW::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:messages.SOW.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SOW::release_nonce() {
  // @@protoc_insertion_point(field_release:messages.SOW.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SOW::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:messages.SOW.nonce)
}

// string topic = 2;
inline void SOW::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SOW::topic() const {
  // @@protoc_insertion_point(field_get:messages.SOW.topic)
  return topic_.GetNoArena();
}
inline void SOW::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.SOW.topic)
}
#if LANG_CXX11
inline void SOW::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.SOW.topic)
}
#endif
inline void SOW::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.SOW.topic)
}
inline void SOW::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.SOW.topic)
}
inline ::std::string* SOW::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:messages.SOW.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SOW::release_topic() {
  // @@protoc_insertion_point(field_release:messages.SOW.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SOW::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:messages.SOW.topic)
}

// string work_unit = 3;
inline void SOW::clear_work_unit() {
  work_unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SOW::work_unit() const {
  // @@protoc_insertion_point(field_get:messages.SOW.work_unit)
  return work_unit_.GetNoArena();
}
inline void SOW::set_work_unit(const ::std::string& value) {
  
  work_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.SOW.work_unit)
}
#if LANG_CXX11
inline void SOW::set_work_unit(::std::string&& value) {
  
  work_unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.SOW.work_unit)
}
#endif
inline void SOW::set_work_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  work_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.SOW.work_unit)
}
inline void SOW::set_work_unit(const char* value, size_t size) {
  
  work_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.SOW.work_unit)
}
inline ::std::string* SOW::mutable_work_unit() {
  
  // @@protoc_insertion_point(field_mutable:messages.SOW.work_unit)
  return work_unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SOW::release_work_unit() {
  // @@protoc_insertion_point(field_release:messages.SOW.work_unit)
  
  return work_unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SOW::set_allocated_work_unit(::std::string* work_unit) {
  if (work_unit != NULL) {
    
  } else {
    
  }
  work_unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), work_unit);
  // @@protoc_insertion_point(field_set_allocated:messages.SOW.work_unit)
}

// string currency_unit = 4;
inline void SOW::clear_currency_unit() {
  currency_unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SOW::currency_unit() const {
  // @@protoc_insertion_point(field_get:messages.SOW.currency_unit)
  return currency_unit_.GetNoArena();
}
inline void SOW::set_currency_unit(const ::std::string& value) {
  
  currency_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.SOW.currency_unit)
}
#if LANG_CXX11
inline void SOW::set_currency_unit(::std::string&& value) {
  
  currency_unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.SOW.currency_unit)
}
#endif
inline void SOW::set_currency_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  currency_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.SOW.currency_unit)
}
inline void SOW::set_currency_unit(const char* value, size_t size) {
  
  currency_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.SOW.currency_unit)
}
inline ::std::string* SOW::mutable_currency_unit() {
  
  // @@protoc_insertion_point(field_mutable:messages.SOW.currency_unit)
  return currency_unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SOW::release_currency_unit() {
  // @@protoc_insertion_point(field_release:messages.SOW.currency_unit)
  
  return currency_unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SOW::set_allocated_currency_unit(::std::string* currency_unit) {
  if (currency_unit != NULL) {
    
  } else {
    
  }
  currency_unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency_unit);
  // @@protoc_insertion_point(field_set_allocated:messages.SOW.currency_unit)
}

// .messages.Signature signature = 5;
inline bool SOW::has_signature() const {
  return this != internal_default_instance() && signature_ != NULL;
}
inline void SOW::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) {
    delete signature_;
  }
  signature_ = NULL;
}
inline const ::messages::Signature& SOW::signature() const {
  const ::messages::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:messages.SOW.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::messages::Signature*>(
      &::messages::_Signature_default_instance_);
}
inline ::messages::Signature* SOW::release_signature() {
  // @@protoc_insertion_point(field_release:messages.SOW.signature)
  
  ::messages::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::messages::Signature* SOW::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::messages::Signature;
  }
  // @@protoc_insertion_point(field_mutable:messages.SOW.signature)
  return signature_;
}
inline void SOW::set_allocated_signature(::messages::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    
  } else {
    
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:messages.SOW.signature)
}

// bytes data = 6;
inline void SOW::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SOW::data() const {
  // @@protoc_insertion_point(field_get:messages.SOW.data)
  return data_.GetNoArena();
}
inline void SOW::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.SOW.data)
}
#if LANG_CXX11
inline void SOW::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.SOW.data)
}
#endif
inline void SOW::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.SOW.data)
}
inline void SOW::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.SOW.data)
}
inline ::std::string* SOW::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:messages.SOW.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SOW::release_data() {
  // @@protoc_insertion_point(field_release:messages.SOW.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SOW::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:messages.SOW.data)
}

// -------------------------------------------------------------------

// Quote

// bytes nonce = 1;
inline void Quote::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Quote::nonce() const {
  // @@protoc_insertion_point(field_get:messages.Quote.nonce)
  return nonce_.GetNoArena();
}
inline void Quote::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Quote.nonce)
}
#if LANG_CXX11
inline void Quote::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Quote.nonce)
}
#endif
inline void Quote::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Quote.nonce)
}
inline void Quote::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Quote.nonce)
}
inline ::std::string* Quote::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:messages.Quote.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Quote::release_nonce() {
  // @@protoc_insertion_point(field_release:messages.Quote.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Quote::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:messages.Quote.nonce)
}

// int64 per_unit_cost = 2;
inline void Quote::clear_per_unit_cost() {
  per_unit_cost_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Quote::per_unit_cost() const {
  // @@protoc_insertion_point(field_get:messages.Quote.per_unit_cost)
  return per_unit_cost_;
}
inline void Quote::set_per_unit_cost(::google::protobuf::int64 value) {
  
  per_unit_cost_ = value;
  // @@protoc_insertion_point(field_set:messages.Quote.per_unit_cost)
}

// .messages.SOW sow = 3;
inline bool Quote::has_sow() const {
  return this != internal_default_instance() && sow_ != NULL;
}
inline void Quote::clear_sow() {
  if (GetArenaNoVirtual() == NULL && sow_ != NULL) {
    delete sow_;
  }
  sow_ = NULL;
}
inline const ::messages::SOW& Quote::sow() const {
  const ::messages::SOW* p = sow_;
  // @@protoc_insertion_point(field_get:messages.Quote.sow)
  return p != NULL ? *p : *reinterpret_cast<const ::messages::SOW*>(
      &::messages::_SOW_default_instance_);
}
inline ::messages::SOW* Quote::release_sow() {
  // @@protoc_insertion_point(field_release:messages.Quote.sow)
  
  ::messages::SOW* temp = sow_;
  sow_ = NULL;
  return temp;
}
inline ::messages::SOW* Quote::mutable_sow() {
  
  if (sow_ == NULL) {
    sow_ = new ::messages::SOW;
  }
  // @@protoc_insertion_point(field_mutable:messages.Quote.sow)
  return sow_;
}
inline void Quote::set_allocated_sow(::messages::SOW* sow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sow_;
  }
  if (sow) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sow, submessage_arena);
    }
    
  } else {
    
  }
  sow_ = sow;
  // @@protoc_insertion_point(field_set_allocated:messages.Quote.sow)
}

// .messages.Signature signature = 4;
inline bool Quote::has_signature() const {
  return this != internal_default_instance() && signature_ != NULL;
}
inline void Quote::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) {
    delete signature_;
  }
  signature_ = NULL;
}
inline const ::messages::Signature& Quote::signature() const {
  const ::messages::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:messages.Quote.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::messages::Signature*>(
      &::messages::_Signature_default_instance_);
}
inline ::messages::Signature* Quote::release_signature() {
  // @@protoc_insertion_point(field_release:messages.Quote.signature)
  
  ::messages::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::messages::Signature* Quote::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::messages::Signature;
  }
  // @@protoc_insertion_point(field_mutable:messages.Quote.signature)
  return signature_;
}
inline void Quote::set_allocated_signature(::messages::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    
  } else {
    
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:messages.Quote.signature)
}

// bytes data = 5;
inline void Quote::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Quote::data() const {
  // @@protoc_insertion_point(field_get:messages.Quote.data)
  return data_.GetNoArena();
}
inline void Quote::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Quote.data)
}
#if LANG_CXX11
inline void Quote::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Quote.data)
}
#endif
inline void Quote::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Quote.data)
}
inline void Quote::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Quote.data)
}
inline ::std::string* Quote::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:messages.Quote.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Quote::release_data() {
  // @@protoc_insertion_point(field_release:messages.Quote.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Quote::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:messages.Quote.data)
}

// -------------------------------------------------------------------

// Agreement

// bytes nonce = 1;
inline void Agreement::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Agreement::nonce() const {
  // @@protoc_insertion_point(field_get:messages.Agreement.nonce)
  return nonce_.GetNoArena();
}
inline void Agreement::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Agreement.nonce)
}
#if LANG_CXX11
inline void Agreement::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Agreement.nonce)
}
#endif
inline void Agreement::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Agreement.nonce)
}
inline void Agreement::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Agreement.nonce)
}
inline ::std::string* Agreement::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:messages.Agreement.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Agreement::release_nonce() {
  // @@protoc_insertion_point(field_release:messages.Agreement.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Agreement::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:messages.Agreement.nonce)
}

// .messages.Quote quote = 2;
inline bool Agreement::has_quote() const {
  return this != internal_default_instance() && quote_ != NULL;
}
inline void Agreement::clear_quote() {
  if (GetArenaNoVirtual() == NULL && quote_ != NULL) {
    delete quote_;
  }
  quote_ = NULL;
}
inline const ::messages::Quote& Agreement::quote() const {
  const ::messages::Quote* p = quote_;
  // @@protoc_insertion_point(field_get:messages.Agreement.quote)
  return p != NULL ? *p : *reinterpret_cast<const ::messages::Quote*>(
      &::messages::_Quote_default_instance_);
}
inline ::messages::Quote* Agreement::release_quote() {
  // @@protoc_insertion_point(field_release:messages.Agreement.quote)
  
  ::messages::Quote* temp = quote_;
  quote_ = NULL;
  return temp;
}
inline ::messages::Quote* Agreement::mutable_quote() {
  
  if (quote_ == NULL) {
    quote_ = new ::messages::Quote;
  }
  // @@protoc_insertion_point(field_mutable:messages.Agreement.quote)
  return quote_;
}
inline void Agreement::set_allocated_quote(::messages::Quote* quote) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete quote_;
  }
  if (quote) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quote = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quote, submessage_arena);
    }
    
  } else {
    
  }
  quote_ = quote;
  // @@protoc_insertion_point(field_set_allocated:messages.Agreement.quote)
}

// .messages.Signature signature = 3;
inline bool Agreement::has_signature() const {
  return this != internal_default_instance() && signature_ != NULL;
}
inline void Agreement::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) {
    delete signature_;
  }
  signature_ = NULL;
}
inline const ::messages::Signature& Agreement::signature() const {
  const ::messages::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:messages.Agreement.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::messages::Signature*>(
      &::messages::_Signature_default_instance_);
}
inline ::messages::Signature* Agreement::release_signature() {
  // @@protoc_insertion_point(field_release:messages.Agreement.signature)
  
  ::messages::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::messages::Signature* Agreement::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::messages::Signature;
  }
  // @@protoc_insertion_point(field_mutable:messages.Agreement.signature)
  return signature_;
}
inline void Agreement::set_allocated_signature(::messages::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    
  } else {
    
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:messages.Agreement.signature)
}

// bytes data = 4;
inline void Agreement::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Agreement::data() const {
  // @@protoc_insertion_point(field_get:messages.Agreement.data)
  return data_.GetNoArena();
}
inline void Agreement::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Agreement.data)
}
#if LANG_CXX11
inline void Agreement::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Agreement.data)
}
#endif
inline void Agreement::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Agreement.data)
}
inline void Agreement::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Agreement.data)
}
inline ::std::string* Agreement::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:messages.Agreement.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Agreement::release_data() {
  // @@protoc_insertion_point(field_release:messages.Agreement.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Agreement::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:messages.Agreement.data)
}

// -------------------------------------------------------------------

// Reward

// bytes nonce = 1;
inline void Reward::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reward::nonce() const {
  // @@protoc_insertion_point(field_get:messages.Reward.nonce)
  return nonce_.GetNoArena();
}
inline void Reward::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Reward.nonce)
}
#if LANG_CXX11
inline void Reward::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Reward.nonce)
}
#endif
inline void Reward::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Reward.nonce)
}
inline void Reward::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Reward.nonce)
}
inline ::std::string* Reward::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:messages.Reward.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reward::release_nonce() {
  // @@protoc_insertion_point(field_release:messages.Reward.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reward::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:messages.Reward.nonce)
}

// .messages.Agreement agreement = 2;
inline bool Reward::has_agreement() const {
  return this != internal_default_instance() && agreement_ != NULL;
}
inline void Reward::clear_agreement() {
  if (GetArenaNoVirtual() == NULL && agreement_ != NULL) {
    delete agreement_;
  }
  agreement_ = NULL;
}
inline const ::messages::Agreement& Reward::agreement() const {
  const ::messages::Agreement* p = agreement_;
  // @@protoc_insertion_point(field_get:messages.Reward.agreement)
  return p != NULL ? *p : *reinterpret_cast<const ::messages::Agreement*>(
      &::messages::_Agreement_default_instance_);
}
inline ::messages::Agreement* Reward::release_agreement() {
  // @@protoc_insertion_point(field_release:messages.Reward.agreement)
  
  ::messages::Agreement* temp = agreement_;
  agreement_ = NULL;
  return temp;
}
inline ::messages::Agreement* Reward::mutable_agreement() {
  
  if (agreement_ == NULL) {
    agreement_ = new ::messages::Agreement;
  }
  // @@protoc_insertion_point(field_mutable:messages.Reward.agreement)
  return agreement_;
}
inline void Reward::set_allocated_agreement(::messages::Agreement* agreement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete agreement_;
  }
  if (agreement) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      agreement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, agreement, submessage_arena);
    }
    
  } else {
    
  }
  agreement_ = agreement;
  // @@protoc_insertion_point(field_set_allocated:messages.Reward.agreement)
}

// int64 amount = 3;
inline void Reward::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Reward::amount() const {
  // @@protoc_insertion_point(field_get:messages.Reward.amount)
  return amount_;
}
inline void Reward::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:messages.Reward.amount)
}

// .messages.Signature signature = 4;
inline bool Reward::has_signature() const {
  return this != internal_default_instance() && signature_ != NULL;
}
inline void Reward::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) {
    delete signature_;
  }
  signature_ = NULL;
}
inline const ::messages::Signature& Reward::signature() const {
  const ::messages::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:messages.Reward.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::messages::Signature*>(
      &::messages::_Signature_default_instance_);
}
inline ::messages::Signature* Reward::release_signature() {
  // @@protoc_insertion_point(field_release:messages.Reward.signature)
  
  ::messages::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::messages::Signature* Reward::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::messages::Signature;
  }
  // @@protoc_insertion_point(field_mutable:messages.Reward.signature)
  return signature_;
}
inline void Reward::set_allocated_signature(::messages::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    
  } else {
    
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:messages.Reward.signature)
}

// bytes data = 5;
inline void Reward::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reward::data() const {
  // @@protoc_insertion_point(field_get:messages.Reward.data)
  return data_.GetNoArena();
}
inline void Reward::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Reward.data)
}
#if LANG_CXX11
inline void Reward::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Reward.data)
}
#endif
inline void Reward::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Reward.data)
}
inline void Reward::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Reward.data)
}
inline ::std::string* Reward::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:messages.Reward.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reward::release_data() {
  // @@protoc_insertion_point(field_release:messages.Reward.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reward::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:messages.Reward.data)
}

// -------------------------------------------------------------------

// Receipt

// bytes nonce = 1;
inline void Receipt::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Receipt::nonce() const {
  // @@protoc_insertion_point(field_get:messages.Receipt.nonce)
  return nonce_.GetNoArena();
}
inline void Receipt::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Receipt.nonce)
}
#if LANG_CXX11
inline void Receipt::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Receipt.nonce)
}
#endif
inline void Receipt::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Receipt.nonce)
}
inline void Receipt::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Receipt.nonce)
}
inline ::std::string* Receipt::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:messages.Receipt.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Receipt::release_nonce() {
  // @@protoc_insertion_point(field_release:messages.Receipt.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Receipt::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:messages.Receipt.nonce)
}

// .messages.Reward reward = 2;
inline bool Receipt::has_reward() const {
  return this != internal_default_instance() && reward_ != NULL;
}
inline void Receipt::clear_reward() {
  if (GetArenaNoVirtual() == NULL && reward_ != NULL) {
    delete reward_;
  }
  reward_ = NULL;
}
inline const ::messages::Reward& Receipt::reward() const {
  const ::messages::Reward* p = reward_;
  // @@protoc_insertion_point(field_get:messages.Receipt.reward)
  return p != NULL ? *p : *reinterpret_cast<const ::messages::Reward*>(
      &::messages::_Reward_default_instance_);
}
inline ::messages::Reward* Receipt::release_reward() {
  // @@protoc_insertion_point(field_release:messages.Receipt.reward)
  
  ::messages::Reward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline ::messages::Reward* Receipt::mutable_reward() {
  
  if (reward_ == NULL) {
    reward_ = new ::messages::Reward;
  }
  // @@protoc_insertion_point(field_mutable:messages.Receipt.reward)
  return reward_;
}
inline void Receipt::set_allocated_reward(::messages::Reward* reward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reward_;
  }
  if (reward) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    
  } else {
    
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:messages.Receipt.reward)
}

// .messages.Signature signature = 3;
inline bool Receipt::has_signature() const {
  return this != internal_default_instance() && signature_ != NULL;
}
inline void Receipt::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) {
    delete signature_;
  }
  signature_ = NULL;
}
inline const ::messages::Signature& Receipt::signature() const {
  const ::messages::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:messages.Receipt.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::messages::Signature*>(
      &::messages::_Signature_default_instance_);
}
inline ::messages::Signature* Receipt::release_signature() {
  // @@protoc_insertion_point(field_release:messages.Receipt.signature)
  
  ::messages::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::messages::Signature* Receipt::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::messages::Signature;
  }
  // @@protoc_insertion_point(field_mutable:messages.Receipt.signature)
  return signature_;
}
inline void Receipt::set_allocated_signature(::messages::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    
  } else {
    
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:messages.Receipt.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
